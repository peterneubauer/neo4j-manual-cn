[[tutorials-java-embedded-hello-world]]
Hello World
===========

学习如何创建和访问节点和关系。
为了获得创建工程的更多信息，请参考章节：<<tutorials-java-embedded-setup>>。


记住，从前面的章节“<<what-is-a-graphdb>>”中，我们了解到Neo4j由下面几部分组成：

* 相互关联的节点。
* 关系。
* 节点和关系的属性。

所有的关系都有自己的类型。
比如说，假如一张图表示一个社会化网络，有一直关系叫做：+KNOWS+。
如果关系+KNOWS+连接了两个节点，那么可能表示这两个人互相认识。
大量的语义都被编码成了关系的类型。
虽然关系是有方向的，但遍历的时候可以无视这点。


[TIP]
源代码下载地址：
https://github.com/neo4j/community/blob/{neo4j-git-tag}/embedded-examples/src/main/java/org/neo4j/examples/EmbeddedNeo4j.java[EmbeddedNeo4j.java]


== 准备数据库 ==

关系类型用一个+enum+类型来保存。
在范例中，我们只需要一个类型。下面是定义代码：

[snippet,java]
----
component=neo4j-examples
source=org/neo4j/examples/EmbeddedNeo4j.java
classifier=sources
tag=createReltype
----

我们还需要定义一些变量：

[snippet,java]
----
component=neo4j-examples
source=org/neo4j/examples/EmbeddedNeo4j.java
classifier=sources
tag=vars
----

下一步我们将启动数据库服务器。
注意如果给定的数据库不存在，他将自动创建。

[snippet,java]
----
component=neo4j-examples
source=org/neo4j/examples/EmbeddedNeo4j.java
classifier=sources
tag=startDb
----

注意启动数据库是一个非常耗费资源的操作，因此不要每次与数据库交互的时候都去启动一次，数据库实例是可以通过多线程共享的。
事务机制是线程受限的。

像我们看到的一样，我们注册一个关闭hook保证当JVM退出时数据库被关闭。
下面是时候开始与数据库进行交互了。

== 在事务中进行多个操作 ==

在一个事务的所有的操作都是原子操作。
这是一个我们期待的设计模式，因为我们相信，事务机制对于实现一个企业级的数据库非常重要。现在，事务定义非常容易：


[snippet,java]
----
component=neo4j-examples
source=org/neo4j/examples/EmbeddedNeo4j.java
classifier=sources
tag=transaction
----

了解更多关于事务的信息，请参考章节： <<transactions>> and
http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/graphdb/Transaction.html[用于事务的Java API]。

== 创建一张小型图 ==

现在，让我们先创建一个节点。
提供的API是非常直观的。
他们都被放在了发行版里面。
可以在http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/免费查看JavaDocs。
因此，这里演示如何创建只有两个节点的小型图：

[snippet,java]
----
component=neo4j-examples
source=org/neo4j/examples/EmbeddedNeo4j.java
classifier=sources
tag=addData
----

我们现在有了一张图，像下面这样：

include::hello-world-java-graph.txt[]

== 打印查询结果 ==

在我们创建好我们的图后，让我们读取里面的数据并打印结果。

[snippet,java]
----
component=neo4j-examples
source=org/neo4j/examples/EmbeddedNeo4j.java
classifier=sources
tag=readData
----

下面输出结果：

include::hello-world-java-output.txt[]

== 移除数据 ==

在这个范例中我们将在提交之前移除一些数据：

[snippet,java]
----
component=neo4j-examples
source=org/neo4j/examples/EmbeddedNeo4j.java
classifier=sources
tag=removingData
----

注意删除一个还有关系的节点，事务提交是会失败。
这为了保证关系始终至少保护一个起点和一个终点。


== 关闭数据库服务器 ==

最后，_当我们的程序运行完成后_，我们关闭数据库服务器链接：

[snippet,java]
----
component=neo4j-examples
source=org/neo4j/examples/EmbeddedNeo4j.java
classifier=sources
tag=shutdownServer
----


