[[tutorials-java-embedded-traversal]]
遍历（Traversal）查询数据
=========

为了阅读关于遍历（Traversal）的内容，请参考章节：<<tutorial-traversal>>。

为了了解更多关于遍历（Traversal）的范例，请参考章节：<<data-modeling-examples>>。

== The Matrix ==

来自上面Matrix范例中的遍历查询，这次我们使用一个新的遍历API：

[TIP]
源代码下载地址：
https://github.com/neo4j/community/blob/{neo4j-git-tag}/embedded-examples/src/main/java/org/neo4j/examples/NewMatrix.java[NewMatrix.java]

.朋友以及朋友的朋友
[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/NewMatrix.java
tag=get-friends
----

让我们做一次实际的遍历查询并打印查询结果：

[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/NewMatrix.java
tag=friends-usage
----

输出结果：

include::matrix-traversal-java-new-friends.txt[]

.Who coded the Matrix?
[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/NewMatrix.java
tag=find-hackers
----

打印最终的结果： 

[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/NewMatrix.java
tag=find--hackers-usage
----

现在我们知道是谁编码了Matrix：

include::matrix-traversal-java-new-hackers.txt[]


=== 跟随一条有序路径遍历 ===

这个范例展示了如何使用一个路径上下文来管理一条路径的情况。

[TIP]
源代码下载地址：
https://github.com/neo4j/community/blob/{neo4j-git-tag}/embedded-examples/src/main/java/org/neo4j/examples/orderedpath/OrderedPath.java[OrderedPath.java]

.Create a toy graph
[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/orderedpath/OrderedPath.java
tag=createGraph
----

["dot", "example-ordered-path.svg"]
----
A -> B [label="REL1" color="EDGEHIGHLIGHT" fontcolor="EDGEHIGHLIGHT"]
A -> C [label="REL2"]
B -> C [label="REL2" color="EDGEHIGHLIGHT" fontcolor="EDGEHIGHLIGHT"]
C -> D [label="REL3" color="EDGEHIGHLIGHT" fontcolor="EDGEHIGHLIGHT"]
----

// include when we have reltype colors
// include::ordered-path-java-graph.txt[]
// then, also include the property setting in the code.

现在，管理的顺序（+REL1+ -> +REL2+ -> +REL3+）已经存储在一个+ArrayList+中。

通过遍历，评估器将检查他，并确保路径的正确性，并返回期望的有序路径：

.定义如何遍历这条路径
[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/orderedpath/OrderedPath.java
tag=walkOrderedPath
----

.做遍历查询并返回结果
[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/orderedpath/OrderedPath.java
tag=printPath
----

输出结果：

include::ordered-path-java-output.txt[]

在这个例子中，我们将定义一个自定义类来格式化输出。
下面展示如何实现：

[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/orderedpath/OrderedPath.java
tag=pathPrinter
----

关于_路径_输出的规则信息,请参考：http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/kernel/Traversal.html[Traversal] 类。


[NOTE]
下面的范例使用了一个废弃的traversal API。
它分享了新traversal API的潜在实现，因此他们的性能表现是一样的。
它提供的功能比较起来非常有限。

== 老的traversal API ==

这是我们想遍历的第一个图数据库:

image::examples-matrix.png[title="Matrix node space view", scaledwidth="75%"]

[TIP]
源代码下载地址：
https://github.com/neo4j/community/blob/{neo4j-git-tag}/embedded-examples/src/main/java/org/neo4j/examples/Matrix.java[Matrix.java]

.朋友以及朋友的朋友
[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/Matrix.java
tag=get-friends
----

让我们做一次遍历并返回结果:

[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/Matrix.java
tag=friends-usage
----

打印结果:

include::matrix-traversal-java-friends.txt[]

.谁制作了Matrix?
[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/Matrix.java
tag=find-hackers
----
    
打印结果：   

[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/Matrix.java
tag=find--hackers-usage
----

现在我们知道谁制作了Matrix：

include::matrix-traversal-java-hackers.txt[]
