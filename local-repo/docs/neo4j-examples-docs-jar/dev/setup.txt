[[tutorials-java-embedded-setup]]
将Neo4j引入到你的工程中
=============================
为你的平台选择一个适合的<<editions,发行版本>>后，通过嵌入Neo4j的jar到你的应用中来引入Neo4j。

下面将为你介绍如何通过更改生成路径或者添加依赖的方式引入Neo4j。


== 增加Neo4j到生成路径中 ==

从下面这些源中获取Neo4j库文件:

* 解压Neo4j的压缩包（http://neo4j.org/download/[下载]），从解压包里面的lib/目录查找jar文件。
* 从http://search.maven.org/#search|ga|1|g%3A%22org.neo4j%22[Maven Central Repository]获取合适的jar文件。


增加jar文件到你的项目工程中：

JDK工具::
增加到 +-classpath+
Eclipse::
 * 右键工程然后选择构造路径 -> 置构造路径。在对话框中，选择_增加外部JARs_，浏览到Neo4j 的‘lib’目录选择所有的jar文件。
 * 使用http://help.eclipse.org/indigo/index.jsp?topic=/org.eclipse.jdt.doc.user/reference/preferences/java/buildpath/ref-preferences-user-libraries.htm[User Libraries]设置其他选项。
IntelliJ IDEA::
 查看http://www.jetbrains.com/idea/webhelp/libraries-global-libraries-and-the-configure-library-dialog.html[Libraries, Global Libraries, and the Configure Library dialog]。
NetBeans::
 * 右键点击 工程中的节点_Libraries_, 选择_Add JAR/Folder_, 浏览到Neo4j的‘lib/’目录并选择所有的jar文件。
 * 你也可以从工程角度管理, 查看http://netbeans.org/kb/docs/java/project-setup.html#projects-classpath[Managing a Project's Classpath]。


== 将Neo4j作为一个依赖引入 ==

为了对主要的Neo4j构件有一个总览，请参考：<<editions>>。
列举在这里面的这些构件将会被引入到实际的Neo4j实现中。
你要么依附这些顶级构件，或者直接引入私有组件。
包括在这的范例使用的是顶级构件的方案。

=== Maven ===

.Maven的依赖
["source","xml","unnumbered","2",presubs="attributes"]
--------------------------------------------
<project>
...
 <dependencies>
  <dependency>
   <groupId>org.neo4j</groupId>
   <artifactId>neo4j</artifactId>
   <version>{neo4j-version}</version>
  </dependency>
  ...
 </dependencies>
...
</project>
--------------------------------------------
_+artifactId+可以在<<editions>>找到。_

=== Eclipse和Maven ===

为了在http://www.eclipse.org[Eclipse]中进行开发，推荐安装http://www.eclipse.org/m2e/[m2e plugin]和让Maven管理工程的生成类路径，看上面。
这也增加了使用Maven在命令行构建你的工程和搭建一个Eclipse开发环境的能力。

=== Ivy ===

确保能从Maven Central解析依赖，比如在你的‘ivysettings.xml‘使用下面的配置：

[source,xml]
----
<ivysettings>
  <settings defaultResolver="main"/>
  <resolvers>
    <chain name="main">
      <filesystem name="local">
        <artifact pattern="${ivy.settings.dir}/repository/[artifact]-[revision].[ext]" />
      </filesystem>
      <ibiblio name="maven_central" root="http://repo1.maven.org/maven2/" m2compatible="true"/>
    </chain>
  </resolvers>
</ivysettings>
----

你可以新增Neo4j到你的ivy.xml文件中：

["source","xml","unnumbered","2",presubs="attributes"]
----
..
<dependencies>
  ..
  <dependency org="org.neo4j" name="neo4j" rev="{neo4j-version}"/>
  ..
</dependencies>
..
----
_+name+可以在<<editions>>找到。_

=== Gradle ===

下面的范例演示了一个直接构建脚本范例，用于引入Neo4j库文件。

["source","groovy","unnumbered","2",presubs="attributes"]
----
def neo4jVersion = "{neo4j-version}"
apply plugin: 'java'
repositories {
   mavenCentral()
}
dependencies {
   compile "org.neo4j:neo4j:$\{neo4jVersion}"
}
----
_Maven坐标（在范例中的+org.neo4j:neo4j+）可以在<<editions>>找到。_


[[tutorials-java-embedded-setup-startstop]]
== 启动和停止 ==

为了创建一个新的数据库或者打开一个已经存在的，你做了一个示例：+http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/kernel/EmbeddedGraphDatabase.html[EmbeddedGraphDatabase]+。

[snippet,java]
----
component=neo4j-examples
source=org/neo4j/examples/EmbeddedNeo4j.java
classifier=sources
tag=startDb
----

[NOTE]
+EmbeddedGraphDatabase+数据库可以在多进程中共享。注意你不能创建多个连接实例指向同一个数据源。

要停止一个数据库，可以调用方法+shutdown()+：

[snippet,java]
----
component=neo4j-examples
source=org/neo4j/examples/EmbeddedNeo4j.java
classifier=sources
tag=shutdownServer
----

为了确保Neo4j确实被关闭了，可以新增一个hook：

[snippet,java]
----
component=neo4j-examples
source=org/neo4j/examples/EmbeddedNeo4j.java
classifier=sources
tag=shutdownHook
----
如果你想通过_只读_的方式访问的你的数据库，请使用+http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/kernel/EmbeddedReadOnlyGraphDatabase.html[EmbeddedReadOnlyGraphDatabase]+。

为了用配置文件来启动Neo4j,需要我们设置一个Neo4j配置文件，像下面这样：

[snippet,java]
----
component=neo4j-examples
source=org/neo4j/examples/StartWithConfiguration.java
classifier=test-sources
tag=startDbWithConfig
----

或者你可以创建一个+Map<String, String>+来代替。

了解更多的配置选项，请参考章节：<<embedded-configuration>>。

