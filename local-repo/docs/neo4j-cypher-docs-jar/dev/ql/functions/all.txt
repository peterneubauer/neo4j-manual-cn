[[functions-all]]
== ALL ==
Tests whether a predicate holds for all element of this collection collection.

*Syntax:* `ALL(identifier in collection WHERE predicate)`

*Arguments:*

* _collection:_ An expression that returns a collection

* _identifier:_ This is the identifier that can be used from the predicate.

* _predicate:_ A predicate that is tested against all items in the collection.

_Query_

[source,cypher]
----
START a=node(3), b=node(1)
MATCH p=a-[*1..3]->b
WHERE all(x in nodes(p)
WHERE x.age > 30)
RETURN p
----


All nodes in the returned paths will have an `age` property of at least 30.

.Result
[queryresult]
----
+-----------------------------------------------------------------------------------------------------------------------------------------------+
| p                                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------+
| [Node[3]{name:"A",age:38,eyes:"brown"},:KNOWS[1] {},Node[5]{name:"C",age:53,eyes:"green"},:KNOWS[3] {},Node[1]{name:"D",age:54,eyes:"brown"}] |
+-----------------------------------------------------------------------------------------------------------------------------------------------+
1 row
0 ms

----



.Try this query live
[console]
----
(1) {"age":54,"eyes":"brown","name":"D"}
(2) {"age":41,"array":["one","two","three"],"eyes":"blue","name":"E"}
(3) {"age":38,"eyes":"brown","name":"A"}
(4) {"age":25,"eyes":"blue","name":"B"}
(5) {"age":53,"eyes":"green","name":"C"}
(3)-[:KNOWS]->(4) {}
(3)-[:KNOWS]->(5) {}
(4)-[:KNOWS]->(1) {}
(4)-[:MARRIED]->(2) {}
(5)-[:KNOWS]->(1) {}


start a=node(3), b=node(1) match p=a-[*1..3]->b where all(x in nodes(p) WHERE x.age > 30) return p
----

