[[functions-extract]]
== EXTRACT ==
To return a single property, or the value of a function from a collection of nodes or relationships,
 you can use `EXTRACT`. It will go through a collection, run an expression on every element, and return the results
 in an collection with these values. It works like the `map` method in functional languages such as Lisp and Scala.

*Syntax:* `EXTRACT( identifier in collection : expression )`

*Arguments:*

* _collection:_ An expression that returns a collection

* _identifier:_ The closure will have an identifier introduced in it's context. Here you decide which identifier to use.

* _expression:_ This expression will run once per value in the collection, and produces the result collection.

_Query_

[source,cypher]
----
START a=node(3), b=node(4), c=node(1)
MATCH p=a-->b-->c
RETURN extract(n in nodes(p) : n.age)
----


The age property of all nodes in the path are returned.

.Result
[queryresult]
----
+--------------------------------+
| extract(n in nodes(p) : n.age) |
+--------------------------------+
| [38,25,54]                     |
+--------------------------------+
1 row
0 ms

----



.Try this query live
[console]
----
(1) {"age":54,"eyes":"brown","name":"D"}
(2) {"age":41,"array":["one","two","three"],"eyes":"blue","name":"E"}
(3) {"age":38,"eyes":"brown","name":"A"}
(4) {"age":25,"eyes":"blue","name":"B"}
(5) {"age":53,"eyes":"green","name":"C"}
(3)-[:KNOWS]->(4) {}
(3)-[:KNOWS]->(5) {}
(4)-[:KNOWS]->(1) {}
(4)-[:MARRIED]->(2) {}
(5)-[:KNOWS]->(1) {}


start a=node(3), b=node(4), c=node(1) match p=a-->b-->c return extract(n in nodes(p) : n.age)
----

