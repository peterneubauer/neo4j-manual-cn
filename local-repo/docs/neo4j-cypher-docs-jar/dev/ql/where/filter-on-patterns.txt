[[where-filter-on-patterns]]
== Filter on patterns ==
Patterns are expressions in Cypher, expressions that return a collection of paths. Collection
expressions are also predicates -- an empty collection represents `false`, and a non-empty represents `true`.

So, patterns are not only expressions, they are also predicates. The only limitation to your pattern is that you must be
able to express it in a single path. You can not use commas between multiple paths like you do in `MATCH`. You can achieve
the same effect by combining multiple patterns with `AND`.

Note that you can not introduce new identifiers here. Although it might look very similar to the `MATCH` patterns, the
`WHERE` clause is all about eliminating matched subgraphs. `MATCH a-[*]->b` is very different from `WHERE a-[*]->b`; the
first will produce a subgraph for every path it can find between `a` and `b`, and the latter will eliminate any matched
subgraphs where `a` and `b` do not have a directed relationship chain between them.
             

_Query_

[source,cypher]
----
START tobias=node(1), others=node(3, 2)
WHERE tobias<--others
RETURN others
----


Nodes that have an outgoing relationship to the "+Tobias+" node are returned.

.Result
[queryresult]
----
+--------------------------------------------+
| others                                     |
+--------------------------------------------+
| Node[3]{name:"Andres",age:36,belt:"white"} |
+--------------------------------------------+
1 row
0 ms

----



.Try this query live
[console]
----
(1) {"age":25,"name":"Tobias"}
(2) {"age":34,"name":"Peter"}
(3) {"age":36,"belt":"white","name":"Andres"}
(3)-[:KNOWS]->(1) {}
(3)-[:KNOWS]->(2) {}


start tobias=node(1), others=node(3, 2) where tobias<--others return others
----

