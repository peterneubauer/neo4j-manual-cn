[[where-boolean-operations]]
== Boolean operations ==
You can use the expected boolean operators `AND` and `OR`, and also the boolean function `NOT()`.

_Query_

[source,cypher]
----
START n=node(3, 1)
WHERE (n.age < 30 and n.name = "Tobias") or not(n.name = "Tobias")
RETURN n
----


This will return both nodes in the start clause.

.Result
[queryresult]
----
+--------------------------------------------+
| n                                          |
+--------------------------------------------+
| Node[3]{name:"Andres",age:36,belt:"white"} |
| Node[1]{name:"Tobias",age:25}              |
+--------------------------------------------+
2 rows
0 ms

----



.Try this query live
[console]
----
(1) {"age":25,"name":"Tobias"}
(2) {"age":34,"name":"Peter"}
(3) {"age":36,"belt":"white","name":"Andres"}
(3)-[:KNOWS]->(1) {}
(3)-[:KNOWS]->(2) {}


start n=node(3, 1) where (n.age < 30 and n.name = "Tobias") or not(n.name = "Tobias")  return n
----

