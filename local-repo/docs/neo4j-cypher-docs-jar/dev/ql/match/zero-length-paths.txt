[[match-zero-length-paths]]
== Zero length paths ==
Using variable length paths that have the lower bound zero means that two identifiers can point to the same node. If the distance between two nodes is zero, they are by definition the same node.

_Query_

[source,cypher]
----
START a=node(3)
MATCH p1=a-[:KNOWS*0..1]->b, p2=b-[:BLOCKS*0..1]->c
RETURN a,b,c, length(p1), length(p2)
----


This query will return four paths, some of which have length zero.

.Result
[queryresult]
----
+------------------------------------------------------------------------------------------------------+
| a                      | b                       | c                       | length(p1) | length(p2) |
+------------------------------------------------------------------------------------------------------+
| Node[3]{name:"Anders"} | Node[3]{name:"Anders"}  | Node[3]{name:"Anders"}  | 0          | 0          |
| Node[3]{name:"Anders"} | Node[3]{name:"Anders"}  | Node[5]{name:"Cesar"}   | 0          | 1          |
| Node[3]{name:"Anders"} | Node[4]{name:"Bossman"} | Node[4]{name:"Bossman"} | 1          | 0          |
| Node[3]{name:"Anders"} | Node[4]{name:"Bossman"} | Node[1]{name:"David"}   | 1          | 1          |
+------------------------------------------------------------------------------------------------------+
4 rows
0 ms

----



.Try this query live
[console]
----
(1) {"name":"David"}
(2) {"name":"Emil"}
(3) {"name":"Anders"}
(4) {"name":"Bossman"}
(5) {"name":"Cesar"}
(1)-[:KNOWS]->(3) {}
(3)-[:KNOWS]->(4) {}
(3)-[:BLOCKS]->(5) {}
(4)-[:KNOWS]->(2) {}
(4)-[:BLOCKS]->(1) {}
(5)-[:KNOWS]->(2) {}


start a=node(3) match p1=a-[:KNOWS*0..1]->b, p2=b-[:BLOCKS*0..1]->c return a,b,c, length(p1), length(p2)
----

